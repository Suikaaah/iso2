type str = A of str | B of str | C of str | D of str
type value =
  | Unit
  | Named of str
  | Cted of (str, value)
  | Tuple of v_list

type v_list = VNil | `VCons of (value, v_list)

type expr =
  | Value of value
  | Let of (pat, fn, pat, expr)

type pair = `Pair of (value, expr)

type pairs = PNil | `PCons of (pair, pairs)

()
