type nat = 0 | S of nat
type 'a opt = None | Some of 'a

let rec cantor_pairing = function
  | x <->
      let y = match x with
        | (S i, j) <-> Some (i, S j)
        | (0, S j) <-> Some (j, 0)
        | (0, 0)   <-> None
      in let z = match y with
        | Some x <-> let y = cantor_pairing x in S y
        | None   <-> 0
      in z
in

let result = cantor_pairing (S S 0, S S S 0) in

(result, {invert cantor_pairing} result)
