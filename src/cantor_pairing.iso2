let rec cantor_pairing = function
  | x <->
      let y = match x with
        | (S i, j) <-> Some (i, S j)
        | (0, S j) <-> Some (j, 0)
        | (0, 0)   <-> None
      in let z = match y with
        | Some x <-> let y = cantor_pairing x in S y
        | None   <-> 0
      in z
in

let result = cantor_pairing (2, 3) in

(result, {invert cantor_pairing} result)
