type nat = 0 | S of nat

(* add (x, y) = (x + y, y) *)
let rec add : (nat, nat) <-> (nat, nat) =
| (m, S n) <->
    let m = S m in
    let (m, n) = add (m, n) in
    (m, S n)
| (m, 0) <-> (m, 0)
in

let result = add (S S 0, S S S 0) in

(result, {invert add} result)

