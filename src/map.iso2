type 'a list = Nil | Cons of 'a * 'a list

type a = 0 | 1 | 2
type b = A | B | C

let rec map f = function
  | h' :: t' <->
      let h = f h' in
      let t = map t' in
      h :: t
  | [] <-> []
in

let iso f = function
  | 0 <-> A
  | 1 <-> B
  | 2 <-> C
in

let result = {map f} [1; 0; 2] in

(result, {invert map f} result)
