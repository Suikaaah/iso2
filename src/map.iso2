let rec map f = function
  | h' :: t' <->
      let h = f h' in
      let t = map t' in
      h :: t
  | [] <-> []
in

(* add (x, y) = (x + y, y) *)
let rec add = function
  | (m, S n) <->
      let m = S m in
      let (m, n) = add (m, n) in
      (m, S n)
  | (m, 0) <-> (m, 0)
in

let result = {map add} [(2, 3); (5, 3); (10, 10)] in

(result, {invert map add} result)
