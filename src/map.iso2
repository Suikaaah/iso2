type a = 0 | 1 | 2
type b = A | B | C
type al = ANil | ACons of (a, al)
type bl = BNil | BCons of (b, bl)

let rec map f = function
  | ACons (h', t') <->
      let h = f h' in
      let t = map t' in
      BCons (h, t)
  | ANil <-> BNil
in

let iso f = function
  | 0 <-> A
  | 1 <-> B
  | 2 <-> C
in

let result = {map f} ACons (1, ACons (0, ACons (2, ANil))) in

(result, {invert map f} result)
