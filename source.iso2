type nat = 0 | S of nat
type opt = None | Some of (nat, nat)

let iso aux =
  iso : (nat, nat) <-> opt.
  | (S i, j)   <-> Some (i, S j)
  | (0, S S j) <-> Some (S j, 0)
  | (0, S 0)   <-> Some (0, 0)
  | (0, 0)     <-> None
  end
in

let iso cantor_pairing =
  fix phi : (nat, nat) <-> nat.
    iso : (nat, nat) <-> nat.
    | x <-> let y = aux x in
            let z =
              iso : opt <-> nat.
              | Some x <-> let y = phi x in S y
              | None   <-> 0
              end y in z
    end
  end
in

cantor_pairing (S S 0, 0)
