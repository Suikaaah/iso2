type bool = true | false
type nat = 0 | 1+ of nat
type blist = nil | cons of (bool, blist)

fix len : blist <-> (blist, nat).
  iso : blist <-> (blist, nat).
  | nil           <-> (nil, 0)
  | cons (`h, `t) <-> let (t, n) = len `t in (cons (`h, t), 1+ n)
  end
end cons (false, cons (true, cons (true, nil)))
