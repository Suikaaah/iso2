type nat = 0 | S nat
type opt = None | Some nat

let iso map (f : nat <-> nat) : opt <-> opt =
  | None   <-> None
  | Some n <-> let n = f n in Some n
in

let iso ass : nat <-> nat =
  | 0     <-> S 0
  | S 0   <-> 0
  | S S n <-> S S n
in

let iso id : nat <-> nat =
  | n <-> n
in

let iso dup : nat <-> (nat, nat) =
  | m <-> let n = id m in (m, n)
in

let iso wtf = map ass in

(wtf Some S 0, wtf None, wtf Some S S S 0, dup S S 0)

