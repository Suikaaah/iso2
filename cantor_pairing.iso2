type nat = 0 | S nat
type opt = None | Some (nat, nat)

let iso aux : (nat, nat) <-> opt =
  | (S i, j)   <-> Some (i, S j)
  | (0, S S j) <-> Some (S j, 0)
  | (0, S 0)   <-> Some (0, 0)
  | (0, 0)     <-> None
in

let rec cantor_pairing : (nat, nat) <-> nat =
  | x <->
      let y = aux x in
      let z = y |>
        iso : opt <-> nat.
        | Some x <-> let y = cantor_pairing x in S y
        | None   <-> 0
      in z
in

let result = cantor_pairing (S S 0, S S S 0) in
(result, (invert cantor_pairing) result)
